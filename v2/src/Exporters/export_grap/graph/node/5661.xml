{"properties":{"genre":"Article","timestamp":"2013-10-15T13:40:21Z","author":["Mullins, Thomas D.","Knauss, Brian K.","Haig, Susan M.","Miller, Mark P."],"title":"Data from: SSR_pipeline: a bioinformatic infrastructure for identifying microsatellites from paired-end Illumina high-throughput DNA sequencing data","host":"Miller MP, Knauss BK, Mullins TD, Haig SM (2013) SSR_pipeline: a bioinformatic infrastructure for identifying microsatellites from paired-end Illumina high-throughput DNA sequencing data. Journal of Heredity 104(6): 881-885.","keywords":["next generation sequencing","microsatellite discovery","Python"],"description":"SSR_pipeline is a flexible set of programs designed to efficiently identify simple sequence repeats (e.g., microsatellites) from paired-end high-throughput Illumina DNA sequencing data. The program suite contains 3 analysis modules along with a fourth control module that can automate analyses of large volumes of data. The modules are used to 1) identify the subset of paired-end sequences that pass Illumina quality standards, 2) align paired-end reads into a single composite DNA sequence, and 3) identify sequences that possess microsatellites (both simple and compound) conforming to user-specified parameters. The microsatellite search algorithm is extremely efficient, and we have used it to identify repeats with motifs from 2 to 25bp in length. Each of the 3 analysis modules can also be used independently to provide greater flexibility or to work with FASTQ or FASTA files generated from other sequencing platforms (Roche 454, Ion Torrent, etc.). We demonstrate use of the program with data from the brine fly Ephydra packardi (Diptera: Ephydridae) and provide empirical timing benchmarks to illustrate program performance on a common desktop computer environment. We further show that the Illumina platform is capable of identifying large numbers of microsatellites, even when using unenriched sample libraries and a very small percentage of the sequencing capacity from a single DNA sequencing run. All modules from SSR_pipeline are implemented in the Python programming language and can therefore be used from nearly any computer operating system (Linux, Macintosh, and Windows).","constituent":["doi:10.5061/dryad.n65k2/1","doi:10.5061/dryad.n65k2/2"],"identifier_uri":"http://hdl.handle.net/10255/dryad.53483","oai":"oai:datadryad.org:10255/dryad.53483","isReferencedBy":["PMID:24052535","doi:10.1093/jhered/est056"],"node_type":"Record","node_source":"Dryad","doi":"doi:10.5061/dryad.n65k2"}}